{"version":3,"sources":["Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["Track","props","addTrack","bind","this","isRemoval","onAdd","track","className","name","artist","album","onClick","renderAction","React","Component","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","defaultValue","playlist","playlistTracks","searchResult1","searchResult2","App","state","playlistName","find","savedTrack","newPlaylistTracks","push","setState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iVAiCeA,G,0EA7BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,SAAW,EAAKA,SAASC,KAAd,gBAHD,E,2DAOf,OAAOC,KAAKH,MAAMI,UAAY,IAAM,M,iCAIpCD,KAAKH,MAAMK,MAAMF,KAAKH,MAAMM,S,+BAGtB,IACEA,EAAUH,KAAKH,MAAfM,MAER,OACI,yBAAKC,UAAU,SACf,yBAAKA,UAAU,qBACX,4BAAKD,EAAME,MACX,2BAAIF,EAAMG,OAAV,MAAqBH,EAAMI,QAE/B,4BAAQH,UAAU,eAAeI,QAASR,KAAKF,UAAWE,KAAKS,qB,GAxBvDC,IAAMC,YCmBXC,E,uKAjBD,IAAD,OACL,OACI,yBAAKR,UAAU,aAEPJ,KAAKH,MAAMgB,OAAOC,KAAI,SAACX,GACnB,OAAO,kBAAC,EAAD,CACHY,GAAIZ,EAAMY,GACVZ,MAAOA,EACPD,MAAO,EAAKL,MAAMK,MAClBD,UAAW,EAAKJ,MAAMI,oB,GAV1BS,IAAMC,WCcfK,E,uKAZP,OACI,yBAAKZ,UAAU,iBACX,uCACA,kBAAC,EAAD,CACIS,OAAQb,KAAKH,MAAMoB,cACnBf,MAAOF,KAAKH,MAAMK,MAClBD,WAAW,S,GARHS,IAAMC,WCYnBO,G,6KAVP,OACI,yBAAKd,UAAU,YACX,2BAAOe,aAAc,iBACrB,kBAAC,EAAD,CAAWN,OAAQb,KAAKH,MAAMuB,SAASC,iBACvC,4BAAQjB,UAAU,iBAAlB,wB,GANOM,IAAMC,YCCvBW,EAAgB,CACpBjB,KAAM,OACNC,OAAQ,mBACRC,MAAO,mBACPQ,GAAI,KAGAQ,EAAgB,CACpBlB,KAAM,eACNC,OAAQ,aACRC,MAAO,SACPQ,GAAI,KAGAE,EAAgB,CACpBK,EACAC,GAuDaC,E,kDA3Cb,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IAED4B,MAAQ,CACXR,cAAeA,EACfG,SAAU,CACRM,aAAc,GACdL,eAAgB,KAIpB,EAAKvB,SAAW,EAAKA,SAASC,KAAd,gBAXC,E,qDAcVI,GACP,IAAIH,KAAKyB,MAAML,SAASC,eAAeM,MAAK,SAAAC,GAAU,OAAIA,EAAWb,KAAOZ,EAAMY,MAAlF,CAGA,IAAMc,EAAoB7B,KAAKyB,MAAML,SAASC,eAC9CQ,EAAkBC,KAAK3B,GACvBH,KAAK+B,SAAS,CACZV,eAAgBQ,O,+BAKlB,OACE,6BACE,iCAAM,0BAAMzB,UAAU,aAAhB,OAAN,OACA,yBAAKA,UAAU,OAEb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEa,cAAejB,KAAKyB,MAAMR,cAC1Bf,MAAOF,KAAKF,WACd,kBAAC,EAAD,CAAUsB,SAAUpB,KAAKyB,MAAML,kB,GApCzBV,IAAMC,WCpBJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c7d1cc5a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.addTrack = this.addTrack.bind(this);\r\n    }\r\n\r\n    renderAction() {\r\n        return this.props.isRemoval ? '-' : '+';\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        const { track } = this.props;\r\n\r\n        return (\r\n            <div className=\"Track\">\r\n            <div className=\"Track-information\">\r\n                <h3>{track.name}</h3>\r\n                <p>{track.artist} | {track.album}</p>\r\n            </div>\r\n            <button className=\"Track-action\" onClick={this.addTrack}>{this.renderAction()}</button>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map((track) => {\r\n                        return <Track \r\n                            id={track.id} \r\n                            track={track}\r\n                            onAdd={this.props.onAdd}\r\n                            isRemoval={this.props.isRemoval}></Track>;\r\n                    })\r\n                }\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList \r\n                    tracks={this.props.searchResults}\r\n                    onAdd={this.props.onAdd}\r\n                    isRemoval={false}></TrackList>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"}/>\r\n                <TrackList tracks={this.props.playlist.playlistTracks}></TrackList>\r\n                <button className=\"Playlist-save\">SAVE TO SPOTIFY</button>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist; ","import React from 'react';\r\nimport './App.css';\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\n\r\nconst searchResult1 = {\r\n  name: 'Agua' ,\r\n  artist: 'J. Balvin & Tiny' ,\r\n  album: 'Bob Sponge movie' ,\r\n  id: '0'\r\n};\r\n\r\nconst searchResult2 = {\r\n  name: 'Tak Tiki Tak' ,\r\n  artist: 'Harry Nach' ,\r\n  album: 'Single' ,\r\n  id: '1'\r\n};\r\n\r\nconst searchResults = [\r\n  searchResult1 ,\r\n  searchResult2\r\n];\r\n\r\nconst playlist = {\r\n  playlistName: 'My Top 50' ,\r\n  playlistTracks: [\r\n    searchResult1 ,\r\n    searchResult2\r\n  ]\r\n};\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { \r\n      searchResults: searchResults ,\r\n      playlist: {\r\n        playlistName: '' , \r\n        playlistTracks: []\r\n      }\r\n    };\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n  }\r\n\r\n  addTrack(track) {\r\n    if (this.state.playlist.playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\r\n      return;\r\n    }\r\n    const newPlaylistTracks = this.state.playlist.playlistTracks;\r\n    newPlaylistTracks.push(track);\r\n    this.setState({\r\n      playlistTracks: newPlaylistTracks\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\">\r\n          {/* <!-- Add a SearchBar component --> */}\r\n          <div className=\"App-playlist\">\r\n            <SearchResults \r\n              searchResults={this.state.searchResults} \r\n              onAdd={this.addTrack}></SearchResults>\r\n            <Playlist playlist={this.state.playlist}></Playlist>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}