{"version":3,"sources":["util/Spotify.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/SearchBar/SearchBar.js","Components/App/App.js","serviceWorker.js","index.js"],"names":["accessToken","Track","props","renderAction","bind","addTrack","removeTrack","sign","onClick","this","isRemoval","className","onAdd","track","onRemove","name","artist","album","React","Component","TrackList","tracks","map","id","key","SearchResults","searchResults","Playlist","handleNameChange","event","onNameChange","target","value","defaultValue","onChange","playlistTracks","onSave","SearchBar","state","term","search","handleTermChange","onSearch","setState","placeholder","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","process","fetch","headers","Authorization","then","response","json","jsonResponse","items","artists","uri","savePlaylist","plalistName","tracksURIs","usersID","method","body","JSON","stringify","playlistID","uris","App","playlistName","updatePlaylistName","find","savedTrack","newPlaylistTracks","push","filter","trackURIs","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.abf8b379.chunk.js","sourcesContent":["let accessToken;\r\nconst clientID = process.env.REACT_APP_JAMMMING_CLIENT_ID;\r\nconst redirectURI = 'http://localhost:3000/';\r\n// console.log(process.env.REACT_APP_JAMMMING_CLIENT_ID);\r\n\r\nconst Spotify = {\r\n    getAccessToken() {\r\n        if (accessToken) {\r\n            return accessToken;\r\n        }\r\n        \r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            // console.log(accessTokenMatch[1]);\r\n            accessToken = accessTokenMatch[1];\r\n            // console.log(expiresInMatch[1]);\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            \r\n            window.setTimeout(() => accessToken = '' , expiresIn * 1000);\r\n            window.history.pushState('Access Token' , null , '/');\r\n\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientID}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectURI}`;\r\n            window.location = accessUrl;\r\n        }\r\n    }\r\n    ,\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(\r\n            `https://api.spotify.com/v1/search?type=track&q=${term}`, {\r\n                headers: {\r\n                    Authorization: `Bearer ${accessToken}`\r\n                }\r\n            }).then(response => {\r\n                // console.log(response.json());\r\n                return response.json();\r\n            }).then((jsonResponse) => {\r\n                // console.log(jsonResponse);\r\n                if (!jsonResponse.tracks) {\r\n                    return [];\r\n                } else {\r\n                    return jsonResponse.tracks.items.map(track => {\r\n                        // console.log(track);\r\n                        return {\r\n                            id: track.id ,\r\n                            name: track.name , \r\n                            artist: track.artists[0].name , \r\n                            album: track.album.name ,\r\n                            uri: track.uri \r\n                        };\r\n                    });\r\n                }\r\n            });\r\n    } \r\n    ,\r\n    savePlaylist(plalistName , tracksURIs) {\r\n        if (plalistName && tracksURIs) {\r\n            const accessToken = Spotify.getAccessToken();\r\n            const headers = { Authorization: `Bearer ${accessToken}` };\r\n            let usersID;\r\n\r\n            return fetch(\r\n                'https://api.spotify.com/v1/me' , \r\n                { headers: headers }\r\n            ).then(response => {\r\n                return response.json();\r\n            }).then((jsonResponse) => {\r\n                usersID = jsonResponse.id;\r\n                return fetch(\r\n                    `https://api.spotify.com/v1/users/${usersID}/playlists` ,\r\n                    {\r\n                        headers: headers , \r\n                        method: 'POST' , \r\n                        body: JSON.stringify({ name: plalistName })\r\n                    }\r\n                ).then(response => {\r\n                   return response.json();\r\n                }).then((jsonResponse) => {\r\n                   const playlistID = jsonResponse.id;\r\n                   return fetch(`https://api.spotify.com/v1/users/${usersID}/playlists/${playlistID}/tracks` , {\r\n                       headers: headers ,\r\n                       method: 'POST' ,\r\n                       body: JSON.stringify({ uris: tracksURIs })\r\n                   });\r\n                });\r\n            });\r\n\r\n        } else {\r\n            return;\r\n        }\r\n    }\r\n};\r\n\r\nexport default Spotify;","import React from 'react';\r\nimport './Track.css';\r\n\r\nclass Track extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.renderAction = this.renderAction.bind(this);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    renderAction() {\r\n        let sign;\r\n        let onClick;\r\n        if (this.props.isRemoval) {\r\n            sign = '-';\r\n            onClick = this.removeTrack;\r\n        } else {\r\n            sign = '+';\r\n            onClick = this.addTrack;\r\n        }\r\n         \r\n        return<button \r\n                className=\"Track-action\" \r\n                onClick={onClick}>{sign}</button>\r\n            \r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    removeTrack() {\r\n       this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    render() {\r\n        const { track } = this.props;\r\n\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{track.name}</h3>\r\n                    <p>{track.artist} | {track.album}</p>\r\n                </div>\r\n                {this.renderAction()}      \r\n            </div>   \r\n        );\r\n    }\r\n}\r\n\r\nexport default Track;","import React from 'react';\r\nimport './TrackList.css';\r\nimport Track from '../Track/Track';\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map((track) => {\r\n                        return <Track \r\n                            id={track.id} \r\n                            key={track.id}\r\n                            track={track}\r\n                            onAdd={this.props.onAdd} \r\n                            onRemove={this.props.onRemove} \r\n                            isRemoval={this.props.isRemoval}></Track>;\r\n                    })\r\n                }\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from 'react';\r\nimport './SearchResults.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList \r\n                    tracks={this.props.searchResults}\r\n                    onAdd={this.props.onAdd}\r\n                    isRemoval={false}></TrackList>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from 'react';\r\nimport './Playlist.css';\r\nimport TrackList from '../TrackList/TrackList';\r\n\r\nclass Playlist extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChange(event.target.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input \r\n                    defaultValue={\"New Playlist\"} \r\n                    onChange={this.handleNameChange} />\r\n                {/* <h1>{this.props.playlistName}</h1> */}\r\n                <TrackList \r\n                    tracks={this.props.playlistTracks} \r\n                    isRemoval={true} \r\n                    onRemove={this.props.onRemove}></TrackList>\r\n                <button className=\"Playlist-save\"\r\n                        onClick={this.props.onSave}>\r\n                    SAVE TO SPOTIFY\r\n                </button>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default Playlist; ","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: ''\r\n        };\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term);\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({\r\n            term: event.target.value\r\n        });\r\n        this.search();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, Album, or Artist\" \r\n                    onChange={this.handleTermChange}/>\r\n                <button className=\"SearchButton\"\r\n                    onClick={this.search}>SEARCH</button>\r\n            </div>            \r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\nimport './App.css';\r\n\r\nimport SearchResults from '../SearchResults/SearchResults';\r\nimport Playlist from '../Playlist/Playlist';\r\nimport SearchBar from '../SearchBar/SearchBar';\r\n\r\nimport Spotify from '../../util/Spotify';\r\n\r\n/* const searchResult1 = {\r\n  name: 'Agua' ,\r\n  artist: 'J. Balvin & Tiny' ,\r\n  album: 'Bob Sponge movie' ,\r\n  id: '0'\r\n};\r\n\r\nconst searchResult2 = {\r\n  name: 'Tak Tiki Tak' ,\r\n  artist: 'Harry Nach' ,\r\n  album: 'Single' ,\r\n  id: '1'\r\n};\r\n\r\nconst searchResults = [\r\n  searchResult1 ,\r\n  searchResult2\r\n]; */\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = { \r\n      searchResults: [] ,\r\n      playlistName: 'Top 50' , \r\n      playlistTracks: []\r\n    };\r\n\r\n    this.addTrack = this.addTrack.bind(this);\r\n    this.removeTrack = this.removeTrack.bind(this);\r\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\r\n    this.savePlaylist = this.savePlaylist.bind(this);\r\n    this.search = this.search.bind(this);\r\n  }\r\n\r\n  addTrack(track) {\r\n    const playlistTracks = this.state.playlistTracks;\r\n\r\n    if (playlistTracks.find((savedTrack) => {\r\n      return savedTrack.id === track.id;\r\n    })) {\r\n      return;\r\n    }\r\n    \r\n    const newPlaylistTracks = playlistTracks;\r\n    newPlaylistTracks.push(track);\r\n\r\n    this.setState({\r\n      playlistTracks: newPlaylistTracks\r\n    });\r\n  }\r\n\r\n  removeTrack(track) {\r\n    const playlistTracks = this.state.playlistTracks;\r\n    \r\n    const newPlaylistTracks = playlistTracks.filter((savedTrack) => {\r\n      return savedTrack.id !== track.id;\r\n    });\r\n\r\n    this.setState({\r\n      playlistTracks: newPlaylistTracks\r\n    });\r\n  }\r\n\r\n  updatePlaylistName(name) {\r\n    this.setState({\r\n      playlistName: name\r\n    });\r\n  }\r\n\r\n  savePlaylist() {\r\n    let trackURIs = this.state.playlistTracks.map(track => track.uri);\r\n    let playlistName = this.state.playlistName;\r\n\r\n    Spotify.savePlaylist(playlistName, trackURIs).then(() => {\r\n      this.setState({\r\n        playlistName: 'New Playlist' ,\r\n        playlistTracks: []\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  search(term) {\r\n    // console.log(term);\r\n    Spotify.search(term).then(searchResults => {\r\n      this.setState({\r\n        searchResults: searchResults\r\n      })\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\r\n        <div className=\"App\">\r\n          <SearchBar\r\n            onSearch={this.search}></SearchBar>\r\n          <div className=\"App-playlist\">\r\n            <SearchResults \r\n              searchResults={this.state.searchResults} \r\n              onAdd={this.addTrack}></SearchResults>\r\n            <Playlist \r\n              playlistTracks={this.state.playlistTracks}\r\n              // playlistName={this.state.playlistName}\r\n              onRemove={this.removeTrack}\r\n              onNameChange={this.updatePlaylistName}\r\n              onSave={this.savePlaylist}></Playlist>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}